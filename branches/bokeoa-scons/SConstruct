#!/usr/bin/env python

# SCons script for building Kicad, adapted from the SCons script for
# building Rosegarden.
#
#     Frederic Coiffier   <frederic.coiffier@free.fr>
#     Bryan Stillwell     <bryan@bokeoa.com>

"""
To compile the project, you will then only need to launch
scons in the top-level directory, the scripts find and
cache the proper environment automatically :

To build the project
-> scons

To clean the project
-> scons -c

To install the project
-> scons install

To uninstall the project
-> scons -c install

To compile while being in a subdirectory
-> cd src; scons -u

To (re)configure the project and give particular arguments, use ie :
-> scons configure debug=1
-> scons configure prefix=/tmp/ita debug=full extraincludes=/usr/local/include:/tmp/include prefix=/usr/local
The variables are saved automatically after the first run
(look at cache/kde.cache.py, ..)

You can alternate between debug/non-debug mode very easily :

scons configure debug=1; scons; scons configure ;
"""

# Define the version
VERSION = "20060221"

import os
import glob
import fnmatch
import re
import string
import sys

## We assume that 'bksys' is our admin directory
import sys, os
sys.path.append('bksys')

## Import the main configuration tool
from generic import configure
config = {
        'modules'  : 'generic wx',
        'builddir' : 'build', # put all object files under 'build/'
        'config.h' : 1, # mechanism should be ok
        'rpath'    : 1, # incomplete
        'bootstrap': 1, # incomplete
        'colorful' : 0 #not os.environ.has_key('NOCOLORS'), # only with scons >= 0.96.91 - now miniscons
}

# and the config.h
env=configure(config)

#-----------------------------
#        Variables
#-----------------------------

# Setup the default build directory to c_reldir
c_builddir = 'build'

## Exit if configuration requested (scons configure)
if 'configure' in COMMAND_LINE_TARGETS:
	env.Exit(0)

#-----------------------------
#        Environment
#-----------------------------
env.AppendUnique(ENV = os.environ)
env.AppendUnique(ENV = {'PATH' : os.environ['PATH'], 'HOME' : os.environ['HOME']})

# Export 'env' so that sconscripts in subdirectories can use it
Export("env")

#-----------------------------
#        Build
#-----------------------------
def givedir(dir):
	return env.join(c_builddir, dir)

dirs = env.Split("""
	3d-viewer
	common
	cvpcb
	eeschema
	gerbview
	kicad
	pcbnew
""")

bdirs=[]
for d in dirs:
	tmpdir = givedir(d)
	env.BuildDir(tmpdir, d)
	bdirs.append(tmpdir)
env.subdirs(bdirs)

## disable object cache, unless you want it (define the SCONS_CACHE env. var)
if not os.environ.has_key('SCONS_CACHE'):
	env.CacheDir(None)

#-----------------------------
# Process the translations
#-----------------------------

# TODO

#-----------------------------
#        Installation
#-----------------------------

# TODO

env.dist('kicad', VERSION)

## All of the subdirectories that contain SConscript files
#modules = ['common', '3d-viewer', 'cvpcb', 'eeschema', 'gerbview', 'kicad', 'pcbnew']

## Load all the SConscript files we use and do a build
#for curmod in modules:
   #SConscript("%s/SConscript" % curmod)
